`timescale 1ns/1ps
`include "UART.v"

module uart_tb;

    reg clk;
    reg rst;
    reg write;
    reg read;
    reg [7:0] data_in;
    reg rx;
    wire tx;
    wire txrdy;
    wire rxrdy;
    wire parityerr;
    wire framingerr;
    wire overrun;

    // Clock and baud rate parameters
    parameter CLOCK_FREQ = 50000000;  // 50 MHz clock
    parameter BAUD_RATE = 9600;       // UART baud rate
    parameter CLK_PERIOD = 20;        // 20 ns clock period (50 MHz)
    localparam BAUD_TICK = CLOCK_FREQ / BAUD_RATE;

    // Instantiate the UART module
    UART uart_inst (
        .clk(clk),
        .rst(rst),
        .write(write),
        .read(read),
        .data(data_in),
        .rx(rx),
        .tx(tx),
        .txrdy(txrdy),
        .rxrdy(rxrdy),
        .parityerr(parityerr),
        .framingerr(framingerr),
        .overrun(overrun)
    );

    // Clock generation logic
    always begin
        clk = 1;
        #(CLK_PERIOD / 2);
        clk = 0;
        #(CLK_PERIOD / 2);
    end

    // Test sequence
    initial begin
        // Dump waveforms for visualization
        $dumpfile("dump.vcd");
        $dumpvars(0, uart_tb);

        // Reset the UART
        rst = 1;
        write = 0;
        read = 0;
        rx = 1;  // Idle state of the RX line is high
        data_in = 8'b0;
        #(CLK_PERIOD * 10);  // Hold reset for some time
        rst = 0;

        // Test Case 1: Transmitting a byte
        @(posedge clk);
        data_in = 8'b10101010;  // Data to send
        write = 1;
        @(posedge clk);
        write = 0;

        // Wait for the transmission to complete
        wait (txrdy == 1);
        $display("Transmission complete: Data sent = %b", data_in);

        // Test Case 2: Receiving a byte
        // Simulate receiving the start bit (low), then data bits, and stop bit (high)
        rx = 0;  // Start bit
        #(BAUD_TICK * 10);  // Wait for 1 baud time
        rx = 1;  // Data bit 0
        #(BAUD_TICK * 10);
        rx = 0;  // Data bit 1
        #(BAUD_TICK * 10);
        rx = 1;  // Data bit 2
        #(BAUD_TICK * 10);
        rx = 0;  // Data bit 3
        #(BAUD_TICK * 10);
        rx = 1;  // Data bit 4
        #(BAUD_TICK * 10);
        rx = 0;  // Data bit 5
        #(BAUD_TICK * 10);
        rx = 1;  // Data bit 6
        #(BAUD_TICK * 10);
        rx = 0;  // Data bit 7
        #(BAUD_TICK * 10);
        rx = 1;  // Stop bit
        #(BAUD_TICK * 10);  // Wait for stop bit

        // Check if data is received correctly
        if (rxrdy == 1) begin
            $display("Data received: Data = %b", uart_inst.receiver_inst.rx_shift_reg);
        end else begin
            $display("Data reception failed!");
        end

        // Test Case 3: Overrun Error
        // Simulate receiving a new byte before reading the previous one
        rx = 0;  // Start bit
        #(BAUD_TICK * 10);  // Start the first byte
        rx = 1;  // Data bit 0
        #(BAUD_TICK * 10);
        rx = 0;  // Data bit 1
        #(BAUD_TICK * 10);
        // Don't read the received data, let another byte come in
        rx = 0;  // Start bit of next byte without reading previous one
        #(BAUD_TICK * 10);

        if (overrun) begin
            $display("Overrun error detected.");
        end else begin
            $display("Overrun error not detected!");
        end

        // Test Case 4: Framing Error
        // Simulate an incorrect stop bit (should be high, but we send low)
        rx = 0;  // Start bit
        #(BAUD_TICK * 10);
        rx = 1;  // Data bits (valid)
        #(BAUD_TICK * 80);
        rx = 0;  // Invalid stop bit (should be high)

        #(BAUD_TICK * 10);  // Wait for stop bit

        if (framingerr) begin
            $display("Framing error detected.");
        end else begin
            $display("Framing error not detected!");
        end

        // Test Case 5: Parity Error
        // Forcing a wrong parity bit and checking if the UART detects it
        // Simulate reception of a byte with incorrect parity
        uart_inst.receiver_inst.rx_shift_reg = 8'b10101010;  // Set the data manually
        rx = ~^uart_inst.receiver_inst.rx_shift_reg;  // Force incorrect parity bit
        #(BAUD_TICK * 10);
        if (parityerr) begin
            $display("Parity error detected.");
        end else begin
            $display("Parity error not detected!");
        end

        $stop;
    end

endmodule
